"package.json
C:\neontj\package.json
{
  ""name"": ""neontj"",
  ""version"": ""0.1.0"",
  ""private"": true,
  ""scripts"": {
    ""dev"": ""next dev"",
    ""build"": ""next build"",
    ""start"": ""next start"",
    ""lint"": ""next lint""
  },
  ""dependencies"": {
    ""@aws-sdk/client-ses"": ""^3.848.0"",
    ""@heroicons/react"": ""^2.2.0"",
    ""dotenv"": ""^17.2.0"",
    ""framer-motion"": ""^12.23.0"",
    ""next"": ""^15.3.5"",
    ""next-navigation"": ""^1.0.6"",
    ""nodemailer"": ""^7.0.5"",
    ""react"": ""^18"",
    ""react-dom"": ""^18"",
    ""zod"": ""^4.0.5""
  },
  ""devDependencies"": {
    ""@tailwindcss/aspect-ratio"": ""^0.4.2"",
    ""@types/node"": ""^20"",
    ""@types/nodemailer"": ""^6.4.17"",
    ""@types/react"": ""^18"",
    ""@types/react-dom"": ""^18"",
    ""autoprefixer"": ""^10.4.21"",
    ""eslint"": ""^8"",
    ""eslint-config-next"": ""14.2.5"",
    ""postcss"": ""^8"",
    ""tailwindcss"": ""^3.4.1"",
    ""typescript"": ""^5""
  }
}
"



"postcss.config.js
C:\neontj\postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}"



"tailwind.config.js
C:\neontj\tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    ""./src/app/**/*.{js,ts,jsx,tsx,mdx}"",
  ],
  theme: {
    extend: {
      colors: {
        bgBlack: ""#0D0D0D"",  // Fixed hex (was #ODODOD0D)
        neonPurple: ""#B800FF"",
        iceBlue: ""#00FFFF"",   // Fixed hex (was #00FFFFF)
        ledWhite: ""#F8F8F8""
      },
      fontFamily: {
        heading: [""Orbitron"", ""sans-serif""], // Removed extra quotes
        sans: [""Poppins"", ""sans-serif""]
      },
      boxShadow: {
        neon: ""0 0 8px rgba(184,0,255,0.7), 0 0 16px rgba(0,255,255,0.5)"",
      },
      dropShadow: {
        neon: [
          ""0 0 8px rgba(184,0,255,0.7)"",
          ""0 0 16px rgba(0,255,255,0.5)""
        ],
      }
    },
  },
  plugins: []
}"



"tsconfig.json
C:\neontj\tsconfig.json
{
  ""compilerOptions"": {
    ""baseUrl"": ""."",
    ""lib"": [
      ""dom"",
      ""dom.iterable"",
      ""esnext""
    ],
    ""allowJs"": true,
    ""skipLibCheck"": true,
    ""strict"": true,
    ""forceConsistentCasingInFileNames"": true,
    ""noEmit"": true,
    ""esModuleInterop"": true,
    ""module"": ""esnext"",
    ""moduleResolution"": ""bundler"",
    ""resolveJsonModule"": true,
    ""isolatedModules"": true,
    ""jsx"": ""preserve"",
    ""incremental"": true,
    ""plugins"": [
      {
        ""name"": ""next""
      }
    ],
    ""paths"": {
      ""@/*"": [""./src/*""]
    },
    ""target"": ""ES2020""
  },
  ""include"": [
    ""next-env.d.ts"",
    ""**/*.ts"",
    ""**/*.tsx"",
    "".next/types/**/*.ts""
  ],
  ""exclude"": [""node_modules""]
}"



"globals.css
C:\neontj\src\app\globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --neon-glow-purple: 0 0 8px rgba(184, 0, 255, 0.7), 0 0 16px rgba(184, 0, 255, 0.4);
    --neon-glow-blue: 0 0 8px rgba(0, 255, 255, 0.7), 0 0 16px rgba(0, 255, 255, 0.4);
  }

  body {
    @apply bg-bgBlack text-ledWhite font-sans antialiased;
    text-rendering: optimizeLegibility; /* Fixed spelling */
  }

  ::selection {
    @apply bg-neonPurple/30 text-iceBlue;
  }
}

@layer components {
  /* Fixed class name (removed extra dot) */
  .neon-text {
    @apply text-neonPurple;
    text-shadow: var(--neon-glow-purple);
    transition: text-shadow 0.3s ease;
  }

  /* Fixed class name */
  .neon-button {
    @apply relative px-6 py-3 rounded-full bg-bgBlack border-2 border-neonPurple
      text-neonPurple font-heading font-bold tracking-wider uppercase 
      transition-all duration-300 overflow-hidden z-0;
    box-shadow: var(--neon-glow-purple);
  }

  .neon-button:hover {
    @apply bg-neonPurple text-bgBlack scale-105;
    box-shadow: var(--neon-glow-purple), 0 0 24px rgba(184, 0, 255, 0.6);
  }
}

@layer utilities {
  .shadow-neon {
    box-shadow: var(--neon-glow-purple);
  }
}

@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;600;700&family=Poppins:wght@300;400;500;600;700&display=swap'); /* Fixed URL */

@font-face {
  font-family: 'Monoton';
  src: url('/fonts/Monoton-Regular.ttf') format('truetype'); /* Fixed extension */
  font-weight: 400;
  font-display: swap;
}"



"layout.tsx
C:\neontj\src\app\layout.tsx
import type { Metadata } from 'next';
import { Orbitron, Poppins } from 'next/font/google';
import './globals.css';
import Counter from '@/app/components/Counter';
import Header from '@/components/Header';
import ErrorBoundary from '@/components/ErrorBoundary';

const orbitron = Orbitron({
  subsets: ['latin'],
  variable: '--font-heading',
});

const poppins = Poppins({
  subsets: ['latin'],
  weight: ['300', '400', '500', '600', '700'],
  variable: '--font-sans',
});

export const metadata: Metadata = {
  title: 'NEONTJ | Custom LED Neon Signs | Fastest in New Orleans',
  description: 'Premium custom LED neon signs with free 2-day shipping and same-day local delivery in Orleans Parish. Not the cheapest — just the best.',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang=""en"" className={`${orbitron.variable} ${poppins.variable}`}>
      <body className=""relative"">
        <ErrorBoundary fallback={<div className=""p-8 text-center"">An error occurred. Please refresh the page.</div>}>
          <Counter />
          <Header />
          {children}
        </ErrorBoundary>
      </body>
    </html>
  );
}"



"page.tsx
C:\neontj\src\app\page.tsx
// src/app/page.tsx
'use client';
import { motion } from 'framer-motion';
import Image from 'next/image';
import Hero from './components/Hero';
import Counter from './components/Counter';
import Link from 'next/link';

const galleryImages = [
  { id: 1, src: '/images/gallery/gallery1.jpg', alt: 'Custom Neon Bar Sign' },
  { id: 2, src: '/images/gallery/gallery2.jpg', alt: 'Personalized Name Neon' },
  { id: 3, src: '/images/gallery/gallery3.jpg', alt: 'LED Business Sign' },
  { id: 4, src: '/images/gallery/gallery4.jpg', alt: 'Home Decor Neon' },
  { id: 5, src: '/images/gallery/gallery5.jpg', alt: 'Wedding Neon Art' },
  { id: 6, src: '/images/gallery/gallery6.jpg', alt: 'Music Themed Sign' },
  { id: 7, src: '/images/gallery/gallery7.jpg', alt: 'Sports Team Neon' },
  { id: 8, src: '/images/gallery/gallery8.jpg', alt: 'Quotation Sign' },
  { id: 9, src: '/images/gallery/gallery9.jpg', alt: 'Logo Design' },
];

function StatItem({ value, label, neon = false }: { value: string; label: string; neon?: boolean }) {
  return (
    <div className=""p-4"">
      <h3 className={`text-3xl md:text-4xl font-heading ${neon ? 'neon-text' : 'text-iceBlue'}`}>
        {value}
      </h3>
      <p className=""text-sm uppercase tracking-wide text-white/80"">{label}</p>
    </div>
  );
}

function GalleryItem({ src, alt }: { src: string; alt: string }) {
  return (
    <motion.div
      whileHover={{ scale: 1.05 }}
      className=""overflow-hidden rounded-lg shadow-lg shadow-neonPurple/30""
    >
      <Image
        src={src}
        alt={alt}
        width={200}
        height={200}
        className=""w-full h-auto object-cover aspect-square""
        priority={false}
      />
    </motion.div>
  );
}

export default function Home() {
  return (
    <main className=""min-h-screen"">
      <Counter />
      <Hero />

      <section className=""bg-gradient-to-r from-neonPurple/20 to-iceBlue/20 py-8"">
        <div className=""container mx-auto px-4 grid grid-cols-2 md:grid-cols-4 gap-4 text-center"">
          <StatItem value=""2-Day"" label=""FAST SHIPPING"" />
          <StatItem value=""MADE"" label=""IN THE US"" />
          <StatItem value=""100%"" label=""SATISFACTION"" />
          <StatItem value=""1,218+"" label=""SIGNS LIT"" neon />
        </div>
      </section>

      <section className=""py-20 container mx-auto px-4"">
        <div className=""text-center mb-12"">
          <h2 className=""text-3xl md:text-5xl font-heading mb-4"">
            <span className=""neon-text"">Recent</span> Creations
          </h2>
        </div>

        <div className=""grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4"">
          {galleryImages.map((image) => (
            <GalleryItem key={image.id} src={image.src} alt={image.alt} />
          ))}
        </div>

        <div className=""text-center mt-8"">
          <Link href=""/portfolio"">
            <button className=""neon-button px-6 py-3"">
              See More Portfolio
            </button>
          </Link>
        </div>
      </section>

      <section className=""py-20 bg-gradient-to-b from-bgBlack to-neonPurple/10"">
        <div className=""container mx-auto px-4 text-center"">
          <Link href=""/custom-sign"">
            <button className=""neon-button px-8 py-4 text-xl"">
              Design Your Sign Now
            </button>
          </Link>
        </div>
      </section>
    </main>
  );
}"



"types.d.ts
C:\neontj\src\app\types.d.ts
declare module '@/app/components/Hero' {
  import { ReactNode } from 'react';
  interface HeroProps {
    setShowModal: (show: boolean) => void;
  }
  const Hero: (props: HeroProps) => ReactNode;
  export default Hero;
}

declare module '@/app/components/Counter' {
  import { ReactNode } from 'react';
  const Counter: () => ReactNode;
  export default Counter;
}

declare module '@/data/signs' {
  interface SignImage {
    id: number;
    src: string;
    alt: string;
    category?: string;
  }
  export const signImages: SignImage[];
  export const galleryImages: SignImage[];
}"



"route.ts
C:\neontj\src\app\api\auth\instagram\callback\route.ts
// src/app/api/auth/instagram/callback/route.ts
import { NextResponse } from 'next/server';

export async function GET(request: Request) {
  // 1) Parse the incoming URL & code
  const { searchParams } = new URL(request.url);
  const code = searchParams.get('code');

  // 2) Log it so you can see it in your terminal
  console.log('🟣 INSTAGRAM OAUTH CODE:', code);

  // 3) If there's no code, bail out
  if (!code) {
    console.log('⚠️ No code in query string!');
    return NextResponse.json({ error: 'Missing code' }, { status: 400 });
  }

  // 4) Exchange the code for a short-lived token…
  const tokenRes = await fetch(
    `https://graph.facebook.com/v17.0/oauth/access_token` +
      `?client_id=${process.env.INSTAGRAM_CLIENT_ID}` +
      `&redirect_uri=${encodeURIComponent(process.env.NEXT_PUBLIC_REDIRECT_URI!)}` +
      `&client_secret=${process.env.INSTAGRAM_CLIENT_SECRET}` +
      `&code=${code}`
  );
  const { access_token: shortLivedToken } = await tokenRes.json();

  // 5) Exchange for a long-lived token…
  const longRes = await fetch(
    `https://graph.facebook.com/v17.0/oauth/access_token` +
      `?grant_type=fb_exchange_token` +
      `&client_id=${process.env.INSTAGRAM_CLIENT_ID}` +
      `&client_secret=${process.env.INSTAGRAM_CLIENT_SECRET}` +
      `&fb_exchange_token=${shortLivedToken}`
  );
  const { access_token: longLivedToken } = await longRes.json();

  // 6) (You’d normally save longLivedToken + IG ID here)
  return NextResponse.redirect('/');
}
"



"route.ts
C:\neontj\src\app\api\send-email\route.ts
import { NextRequest, NextResponse } from 'next/server';
import { SESClient, SendEmailCommand } from '@aws-sdk/client-ses';

const sesClient = new SESClient({
  region: process.env.AWS_REGION,
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID!, // Fixed variable names
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,
  },
});

export async function POST(request: NextRequest) {
  try {
    const data = await request.json();

    // Enhanced validation
    if (!data.line1 || !data.size || !data.price) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      ); // Fixed closing bracket
    }

    // Create email parameters
    const params = {
      Source: 'info@itsmeteejev.com',
      Destination: {
        ToAddresses: ['internetmoneyiri@gmail.com']
      },
      Message: {
        Subject: {
          Data: `New Neon Sign Quote Request - ${new Date().toLocaleDateString()}`
        },
        Body: {
          Html: {
            Data: `
              <h1>New Custom Sign Quote Request</h1>
              <h2>Design Details</h2>
              <p><strong>Line 1:</strong> ${data.line1}</p>
              <p><strong>Line 2:</strong> ${data.line2 || 'N/A'}</p>
              <p><strong>Line Count:</strong> ${data.lineCount}</p>
              <p><strong>Font:</strong> ${data.font}</p>
              <p><strong>Size:</strong> ${data.size}</p>
              <p><strong>Color:</strong> ${data.color}</p>
              <p><strong>Backboard Style:</strong> ${data.backboardStyle}</p>
              <p><strong>Backboard Color:</strong> ${data.backboardColor}</p>
              <p><strong>Estimated Price:</strong> $${data.price.toFixed(2)}</p>
              <p><strong>Timestamp:</strong> ${new Date().toLocaleString()}</p>
              <p><strong>User Email:</strong> ${data.email || 'Not provided'}</p>
            `
          }
        }
      }
    };

    const command = new SendEmailCommand(params);
    await sesClient.send(command);

    return NextResponse.json({
      success: true,
      message: 'Quote request submitted successfully'
    });

  } catch (error: any) {
    console.error('SES Error:', error);
    let errorMessage = 'Failed to send email';
    
    if (error.name === 'InvalidParameterValue') {
      errorMessage = 'Invalid email address';
    } else if (error.name === 'AccessDeniedException') {
      errorMessage = 'AWS access denied - check permissions';
    }

    return NextResponse.json(
      {
        error: errorMessage,
        details: error.message,
        code: error.name
      },
      { status: 500 }
    );
  }
}"



"route.ts
C:\neontj\src\app\api\send-quote\route.ts
import { NextRequest, NextResponse } from 'next/server';
import { sendQuoteEmail } from '@/utils/email';
import { z } from 'zod';

// Validation schema
const QuoteSchema = z.object({
  line1: z.string().min(1).max(50),
  line2: z.string().max(50).optional(),
  font: z.string().min(1),
  lineCount: z.number().int().min(1).max(2),
  size: z.string().min(1),
  color: z.string().regex(/^#[0-9A-F]{6}$/i),
  backboardStyle: z.string().min(1),
  backboardColor: z.string().min(1),
  price: z.number().positive(),
  email: z.string().email()
});

export async function POST(request: NextRequest) {
  try {
    const quoteData = await request.json();
    
    // Validate input
    const validation = QuoteSchema.safeParse(quoteData);
    if (!validation.success) {
      return NextResponse.json(
        { error: 'Invalid data', details: validation.error },
        { status: 400 }
      );
    }

    const success = await sendQuoteEmail(validation.data);

    if (success) {
      return NextResponse.json({ success: true });
    }
    return NextResponse.json(
      { error: 'Failed to send email' },
      { status: 500 }
    );
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}"



"Counter.tsx
C:\neontj\src\app\components\Counter.tsx
'use client';
import { useEffect, useState } from 'react';
import { motion } from 'framer-motion';

export default function Counter() {
  const [count, setCount] = useState(1218);

  useEffect(() => {
    const savedCount = localStorage.getItem('neonSignCount');
    const initialCount = savedCount ? parseInt(savedCount, 10) : 1218;
    setCount(initialCount);

    const interval = setInterval(() => {
      setCount(prev => {
        const newCount = prev + 2;
        localStorage.setItem('neonSignCount', newCount.toString());
        return newCount;
      });
    }, 1000 * 60 * 60 * 48); // Update every 48 hours

    return () => clearInterval(interval);
  }, []);

  return (
    <motion.div
      className=""fixed top-4 right-4 z-50 bg-bgBlack/80 backdrop-blur-sm px-4 py-2 rounded-full border border-neonPurple shadow-neon""
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
    >
      <div className=""flex items-center gap-2"">
        <motion.span
          className=""text-neonPurple font-heading text-xl font-bold""
          key={count}
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          {count.toLocaleString()}+
        </motion.span>
        <span className=""text-sm"">signs lit</span>
      </div>
    </motion.div>
  );
}"



"Hero.tsx
C:\neontj\src\app\components\Hero.tsx
'use client';
import { useState } from 'react'; // Add this import
import { motion } from 'framer-motion';
import Image from 'next/image';
import Link from 'next/link';

interface SignImage {
  id: number;
  src: string;
  alt: string;
}

const demoSigns: SignImage[] = [
  { id: 1, src: '/images/signs/sign1.jpg', alt: 'Custom Neon Sign' },
  { id: 2, src: '/images/signs/sign2.jpg', alt: 'LED Neon Art' },
  { id: 3, src: '/images/signs/sign3.jpg', alt: 'Personalized Neon' },
];

export default function Hero() {
  const [hoveredId, setHoveredId] = useState<number | null>(null); // Now this will work

  return (
    <section className=""relative h-screen w-full overflow-hidden"">
      <div className=""absolute inset-0 grid grid-cols-3 grid-rows-3 gap-1 p-1"">
        {demoSigns.map((sign) => (
          <motion.div
            key={sign.id}
            className=""relative bg-bgBlack overflow-hidden"" 
            initial={{ scale: 1 }} 
            animate={{
              scale: hoveredId === sign.id ? 1.05 : 1,
              zIndex: hoveredId === sign.id ? 10 : 1
            }}
            transition={{ type: 'spring', stiffness: 300 }} 
            onHoverStart={() => setHoveredId(sign.id)} 
            onHoverEnd={() => setHoveredId(null)}
          >
            <Image
              src={sign.src}
              alt={sign.alt}
              fill
              className=""object-cover""
              sizes=""(max-width: 768px) 33vw, 20vw""
              priority={sign.id <= 3}
            />
          </motion.div>
        ))}
      </div>

      <div className=""absolute inset-0 flex flex-col items-center justify-center bg-bgBlack/60 z-20"">
        <motion.h1
          className=""text-5xl md:text-7xl font-heading mb-6 text-center neon-text""
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
        >
          NEON<span className=""text-iceBlue"">TJ</span>
        </motion.h1>

        <Link href=""/custom-sign"">
          <motion.button
            className=""neon-button""
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.6 }}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            Get Your Custom Quote — FAST
          </motion.button>
        </Link>
      </div>
    </section>
  );
}"



"page.tsx
C:\neontj\src\app\custom-sign\page.tsx
'use client';
import { motion } from 'framer-motion';
import Link from 'next/link';

export default function CustomSignSelection() {
  return (
    <div className=""min-h-screen bg-bgBlack text-ledWhite flex flex-col items-center justify-center p-4"">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className=""max-w-4xl w-full""
      >
        <h1 className=""text-4xl md:text-6xl font-heading text-center mb-8 neon-text"">
          Design Your Neon Sign
        </h1>
        <p className=""text-center text-xl text-iceBlue mb-12"">
          SELECT SIGN TYPE
        </p>

        <div className=""grid grid-cols-1 md:grid-cols-2 gap-8"">
          <Link href=""/custom-sign/text"">
            <motion.div
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className=""bg-bgBlack/50 border border-neonPurple/30 rounded-xl p-8 flex flex-col items-center cursor-pointer""
            >
              <h2 className=""text-2xl font-heading text-iceBlue mb-4"">Text Only</h2>
              <p className=""text-center mb-6"">
                Create a custom sign with your text. Choose font, color, and size.
                Order directly with live preview.
              </p>
              <div className=""mt-auto"">
                <button className=""neon-button px-6 py-3"">Create Text Sign</button>
              </div>
            </motion.div>
          </Link>

          <Link href=""/custom-sign/logo"">
            <motion.div
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className=""bg-bgBlack/50 border border-neonPurple/30 rounded-xl p-8 flex flex-col items-center cursor-pointer""
            >
              <h2 className=""text-2xl font-heading text-iceBlue mb-4"">Logo/Image Upload</h2>
              <p className=""text-center mb-6"">
                Upload your logo or design. We'll create a custom quote and contact you.
              </p>
              <div className=""mt-auto"">
                <button className=""neon-button px-6 py-3"">Upload Design</button>
              </div>
            </motion.div>
          </Link>
        </div>

        <p className=""text-center mt-12 text-iceBlue"">
          ** All signs include a remote dimmer!
        </p>
      </motion.div>
    </div>
  );
}"



"page.tsx
C:\neontj\src\app\custom-sign\logo\page.tsx
'use client';
import { useState } from 'react';
import { motion } from 'framer-motion';
import ErrorBoundary from '@/components/ErrorBoundary';

// Validation helper
const validateEmail = (email: string): boolean => {
  const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return re.test(email);
};

export default function LogoUploadPage() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [message, setMessage] = useState('');
  const [file, setFile] = useState<File | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitMessage, setSubmitMessage] = useState('');

  const validateForm = (): string | null => {
    if (!name.trim()) return 'Name is required';
    if (!email.trim()) return 'Email is required';
    if (!validateEmail(email)) return 'Invalid email format';
    if (!message.trim()) return 'Design details are required';
    if (file && file.size > 10 * 1024 * 1024) return 'File size exceeds 10MB limit';
    return null;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const validationError = validateForm();
    if (validationError) {
      setSubmitMessage(validationError);
      return;
    }

    setIsSubmitting(true);
    setSubmitMessage('');

    // Form submission logic would go here
    console.log('Form submitted', { name, email, phone, message, file });

    // Simulate submission
    setTimeout(() => {
      setIsSubmitting(false);
      setSubmitMessage('Thank you! We will contact you shortly with a quote.');
      // Reset form
      setName('');
      setEmail('');
      setPhone('');
      setMessage('');
      setFile(null);
    }, 1500);
  };

  return (
    <div className=""min-h-screen bg-bgBlack text-ledWhite"">
      <div className=""container mx-auto px-4 py-8"">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className=""max-w-3xl mx-auto""
        >
          <h1 className=""text-4xl md:text-5xl font-heading text-center mb-8 neon-text"">
            Custom Logo/Image Neon Sign
          </h1>
          <p className=""text-center text-xl text-iceBlue mb-12"">
            Upload your design and we'll create a custom quote for you
          </p>

          <ErrorBoundary fallback={<div className=""text-red-500 p-4"">Form failed to load</div>}>
            <form onSubmit={handleSubmit} className=""space-y-6"">
              <div>
                <label className=""block text-lg mb-2"">Name</label>
                <input
                  type=""text""
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  required
                  className=""w-full bg-bgBlack border border-neonPurple rounded-lg px-4 py-3""
                  placeholder=""Your full name""
                />
              </div>

              <div>
                <label className=""block text-lg mb-2"">Email</label>
                <input
                  type=""email""
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                  className=""w-full bg-bgBlack border border-neonPurple rounded-lg px-4 py-3""
                  placeholder=""your.email@example.com""
                />
              </div>

              <div>
                <label className=""block text-lg mb-2"">Phone (optional)</label>
                <input
                  type=""tel""
                  value={phone}
                  onChange={(e) => setPhone(e.target.value)}
                  className=""w-full bg-bgBlack border border-neonPurple rounded-lg px-4 py-3""
                  placeholder=""(555) 123-4567""
                />
              </div>

              <div>
                <label className=""block text-lg mb-2"">Design Details</label>
                <textarea
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  required
                  rows={4}
                  className=""w-full bg-bgBlack border border-neonPurple rounded-lg px-4 py-3""
                  placeholder=""Describe your design, size requirements, colors, and any special requests""
                ></textarea>
              </div>

              <div>
                <label className=""block text-lg mb-2"">
                  Upload your logo or image (optional)
                </label>
                <input
                  type=""file""
                  onChange={(e) => setFile(e.target.files?.[0] || null)}
                  className=""w-full bg-bgBlack border border-neonPurple rounded-lg px-4 py-3""
                  accept=""image/*,.pdf,.ai,.eps""
                />
                <p className=""text-sm text-iceBlue/80 mt-2"">
                  Supported formats: JPG, PNG, PDF, AI, EPS (Max 10MB)
                </p>
              </div>

              <button
                type=""submit""
                disabled={isSubmitting}
                className={`neon-button w-full py-4 text-xl ${isSubmitting ? 'opacity-70 cursor-not-allowed' : ''}`}
              >
                {isSubmitting ? 'Submitting...' : 'Submit Request'}
              </button>

              {submitMessage && (
                <p className={`text-center ${submitMessage.includes('Thank you') ? 'text-green-500' : 'text-red-500'}`}>
                  {submitMessage}
                </p>
              )}
            </form>
          </ErrorBoundary>
        </motion.div>
      </div>
    </div>
  );
}"



"page.tsx
C:\neontj\src\app\custom-sign\text\page.tsx
'use client';
import { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import PreviewCanvas from '@/components/customizer/PreviewCanvas';
import FontSelector from '@/components/customizer/FontSelector';
import ColorPicker from '@/components/customizer/ColorPicker';
import BackboardOptions from '@/components/customizer/BackboardOptions';
import { getPriceDetails } from '@/utils/pricing';
import { pricingTable } from '@/data/pricing';

interface Font {
  id: string;
  name: string;
  category: string;
}

interface SignConfig {
  line1: string;
  line2: string;
  font: string;
  lineCount: number;
  size: string;
  color: string;
  backboardStyle: string;
  backboardColor: string;
  price: number;
}

const fonts: Font[] = [
  { id: 'Orbitron', name: 'Orbitron', category: 'Modern' },
  { id: 'Rajdhani', name: 'Rajdhani', category: 'Tech' },
  { id: 'Monoton', name: 'Monoton', category: 'Classic' },
  { id: 'Audiowide', name: 'Audiowide', category: 'Retro' },
  { id: 'Press Start 2P', name: 'Press Start 2P', category: 'Arcade' },
];

export default function CustomSignPage() {
  const [signConfig, setSignConfig] = useState<SignConfig>({
    line1: 'HELLO',
    line2: 'WORLD',
    font: 'Orbitron',
    lineCount: 1,
    size: '18""×24""',
    color: '#B800FF',
    backboardStyle: 'rectangle',
    backboardColor: 'clear',
    price: getPriceDetails(169).finalPrice
  });
  
  const [email, setEmail] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    const sizes = signConfig.lineCount === 1 ? pricingTable.oneLine : pricingTable.twoLine;
    const selectedSize = sizes.find(s => s.size === signConfig.size);
    if (selectedSize) {
      const priceDetails = getPriceDetails(selectedSize.basePrice);
      setSignConfig(prev => ({ 
        ...prev, 
        price: priceDetails.finalPrice 
      }));
    }
  }, [signConfig.size, signConfig.lineCount]);

  const updateConfig = (key: keyof SignConfig, value: any) => {
    setSignConfig(prev => ({ ...prev, [key]: value }));
  };

  const handleGetQuote = async () => {
    if (!email) {
      alert('Please enter your email address');
      return;
    }

    setIsSubmitting(true);
    const quoteData = {
      ...signConfig,
      email,
      timestamp: new Date().toISOString()
    };

    try {
      const response = await fetch('/api/send-quote', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(quoteData)
      });

      if (response.ok) {
        alert('Your quote request has been sent! We will email you shortly.');
        setEmail('');
      } else {
        alert('Failed to send quote. Please try again.');
      }
    } catch (error) {
      console.error('Error', error);
      alert('An error occurred. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className=""min-h-screen bg-bgBlack text-ledWhite"">
      <div className=""container mx-auto px-4 py-8"">
        <motion.div
          className=""text-center mb-12""
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.2 }}
        >
          <h2 className=""text-4xl md:text-6xl font-heading mb-4 neon-text"">
            Design Your Custom Sign
          </h2>
          <p className=""text-xl text-iceBlue"">
            Create and preview your custom neon sign in real-time
          </p>
        </motion.div>

        <div className=""grid grid-cols-1 lg:grid-cols-3 gap-8"">
          {/* Preview Panel */}
          <div className=""lg:col-span-2 bg-bgBlack/50 border border-neonPurple/30 rounded-xl p-6"">
            <PreviewCanvas config={signConfig} />
            {/* Total Price Only */}
            <div className=""mt-6 p-4 bg-bgBlack/70 border border-neonPurple/30 rounded-lg text-center"">
              <div className=""text-2xl font-heading neon-text"">
                Estimated Price: ${signConfig.price.toFixed(2)}
              </div>
              <p className=""text-sm text-iceBlue mt-2"">
                Final price confirmed after design review
              </p>
            </div>
          </div>

          {/* Configuration Panel */}
          <div className=""space-y-8"">
            {/* Text Input */}
            <div className=""bg-bgBlack/50 border border-neonPurple/30 rounded-xl p-6"">
              <h3 className=""text-xl font-heading text-iceBlue mb-4"">
                YOUR TEXT
              </h3>

              {/* Line 1 */}
              <input
                type=""text""
                value={signConfig.line1}
                onChange={(e) => updateConfig('line1', e.target.value.toUpperCase())}
                className=""w-full bg-bgBlack border border-neonPurple rounded-lg px-4 py-3 text-xl text-center font-heading focus:outline-none focus:ring-2 focus:ring-iceBlue mb-4""
                placeholder=""Line 1""
                maxLength={20}
              />

              {/* Line 2 (only shown if 2 lines selected) */}
              {signConfig.lineCount === 2 && (
                <input
                  type=""text""
                  value={signConfig.line2}
                  onChange={(e) => updateConfig('line2', e.target.value.toUpperCase())}
                  className=""w-full bg-bgBlack border border-neonPurple rounded-lg px-4 py-3 text-xl text-center font-heading focus:outline-none focus:ring-2 focus:ring-iceBlue""
                  placeholder=""Line 2""
                  maxLength={20}
                />
              )}

              <div className=""flex justify-center mt-4 space-x-2"">
                {[1, 2].map((lines) => (
                  <button
                    key={lines}
                    className={`px-4 py-2 rounded-full ${
                      signConfig.lineCount === lines
                        ? 'bg-neonPurple text-bgBlack'
                        : 'bg-bgBlack border border-neonPurple'
                    }`}
                    onClick={() => updateConfig('lineCount', lines)}
                  >
                    {lines} Line{lines > 1 ? 's' : ''}
                  </button>
                ))}
              </div>
            </div>

            {/* Size Selector */}
            <div className=""bg-bgBlack/50 border border-neonPurple/30 rounded-xl p-6"">
              <h3 className=""text-xl font-heading text-iceBlue mb-4"">
                SELECT SIZE
              </h3>

              <div className=""flex flex-wrap gap-2"">
                {signConfig.lineCount === 1
                  ? pricingTable.oneLine.map((size) => (
                      <button
                        key={size.size}
                        className={`px-4 py-2 rounded-full ${
                          signConfig.size === size.size
                            ? 'bg-neonPurple text-bgBlack shadow-neon'
                            : 'bg-bgBlack border border-neonPurple hover:border-iceBlue'
                        }`}
                        onClick={() => updateConfig('size', size.size)}
                      >
                        {size.size}
                      </button>
                    ))
                  : pricingTable.twoLine.map((size) => (
                      <button
                        key={size.size}
                        className={`px-4 py-2 rounded-full ${
                          signConfig.size === size.size
                            ? 'bg-neonPurple text-bgBlack shadow-neon'
                            : 'bg-bgBlack border border-neonPurple hover:border-iceBlue'
                        }`}
                        onClick={() => updateConfig('size', size.size)}
                      >
                        {size.size}
                      </button>
                    ))}
              </div>
            </div>

            <FontSelector
              fonts={fonts}
              selectedFont={signConfig.font}
              onSelect={(font) => updateConfig('font', font)}
            />

            <ColorPicker
              selectedColor={signConfig.color}
              onSelect={(color) => updateConfig('color', color)}
            />

            <BackboardOptions
              selectedStyle={signConfig.backboardStyle}
              selectedColor={signConfig.backboardColor}
              onStyleSelect={(style) => updateConfig('backboardStyle', style)}
              onColorSelect={(color) => updateConfig('backboardColor', color)}
            />

            <div className=""bg-gradient-to-r from-neonPurple/30 to-iceBlue/20 rounded-xl p-6 text-center"">
              <div className=""text-2xl font-heading mb-4"">
                Ready for a Quote? <span className=""neon-text"">${signConfig.price.toFixed(2)}</span>
              </div>

              {/* Email Input */}
              <div className=""mb-4"">
                <input
                  type=""email""
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className=""w-full bg-bgBlack border border-neonPurple rounded-lg px-4 py-3 text-center focus:outline-none focus:ring-2 focus:ring-iceBlue""
                  placeholder=""your@email.com""
                  required
                />
                <p className=""text-xs text-iceBlue mt-1"">Where should we send your quote?</p>
              </div>

              <button
                className={`neon-button w-full py-4 text-xl ${!email || isSubmitting ? 'opacity-70 cursor-not-allowed' : ''}`}
                onClick={handleGetQuote}
                disabled={!email || isSubmitting}
              >
                {isSubmitting ? (
                  <div className=""flex items-center justify-center"">
                    <svg className=""animate-spin h-5 w-5 mr-3 text-current"" viewBox=""0 0 24 24"">
                      <circle className=""opacity-25"" cx=""12"" cy=""12"" r=""10"" stroke=""currentColor"" strokeWidth=""4"" fill=""none"" />
                      <path className=""opacity-75"" fill=""currentColor"" d=""M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"" />
                    </svg>
                    Processing...
                  </div>
                ) : 'Get Quote'}
              </button>
              <p className=""mt-4 text-sm text-iceBlue"">
                We'll email you within 24 hours to finalize your design
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}"



"page.tsx
C:\neontj\src\app\portfolio\page.tsx
import { useState } from 'react';
import { galleryImages } from '@/data/signs';
import Image from 'next/image';
import Link from 'next/link';
import ErrorBoundary from '@/components/ErrorBoundary';

export const metadata = {
  title: 'Portfolio - NEONTJ',
  description: 'View our custom neon sign portfolio with real client examples',
};

export default function PortfolioPage() {
  const [loading, setLoading] = useState(false);
  const [visibleImages, setVisibleImages] = useState(12);

  const loadMore = () => {
    setLoading(true);
    // Simulate network request
    setTimeout(() => {
      setVisibleImages(prev => prev + 12);
      setLoading(false);
    }, 1000);
  };

  return (
    <main className=""min-h-screen bg-bgBlack py-20"">
      <div className=""container mx-auto px-4"">
        <div className=""text-center mb-12"">
          <h1 className=""text-4xl md:text-6xl font-heading mb-4"">
            <span className=""neon-text"">Our</span> Portfolio
          </h1>
          <p className=""text-xl text-iceBlue max-w-2xl mx-auto"">
            Browse through our collection of custom neon signs created for clients worldwide
          </p>
        </div>

        <ErrorBoundary fallback={<div className=""text-red-500 p-8 text-center"">Failed to load gallery</div>}>
          <div className=""grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6"">
            {galleryImages.slice(0, visibleImages).map((image) => (
              <div key={image.id} className=""bg-bgBlack/50 border border-neonPurple/30 rounded-xl overflow-hidden transition-all hover:shadow-neon"">
                <Image
                  src={image.src}
                  alt={image.alt}
                  width={400}
                  height={400}
                  className=""w-full h-auto object-cover aspect-square""
                />
                <div className=""p-4"">
                  <p className=""text-ledWhite font-medium"">{image.alt}</p>
                </div>
              </div>
            ))}
          </div>
        </ErrorBoundary>

        {visibleImages < galleryImages.length && (
          <div className=""mt-12 text-center"">
            <button
              onClick={loadMore}
              disabled={loading}
              className=""neon-button px-8 py-4 text-xl""
            >
              {loading ? 'Loading...' : 'Load More'}
            </button>
          </div>
        )}

        <div className=""mt-12 text-center"">
          <Link href=""/custom-sign"">
            <button className=""neon-button px-8 py-4 text-xl"">
              Create Your Custom Sign
            </button>
          </Link>
        </div>
      </div>
    </main>
  );
}"



"page.tsx
C:\neontj\src\app\privacy\page.tsx
// src/app/privacy/page.tsx
export const metadata = {
  title: 'Privacy Policy – NeonTJ',
  description: 'How NeonTJ collects and uses data for our custom neon sign service.',
};

export default function PrivacyPage() {
  return (
    <main className=""prose prose-invert max-w-3xl mx-auto py-16 px-4"">
      <h1>Privacy Policy</h1>
      <p>Effective date: July 6, 2025</p>

      <h2>1. Information We Collect</h2>
      <p>We collect your name, email, phone number, and any files you upload when requesting quotes…</p>

      <h2>2. How We Use Your Information</h2>
      <p>We use your details to process custom sign requests, communicate order updates, and improve our services…</p>

      <h2>3. Third-Party Services</h2>
      <p>We employ FormSubmit.co to handle form submissions securely. We do not share your data with any advertisers…</p>

      <h2>4. Your Rights</h2>
      <p>You can request deletion of your data at any time by emailing internetmoneyirl@gmail.com…</p>

      <h2>5. Contact Us</h2>
      <p>Questions? <a href=""mailto:internetmoneyirl@gmail.com"">internetmoneyirl@gmail.com</a></p>
    </main>
  );
}
"



"ErrorBoundary.tsx
C:\neontj\src\components\ErrorBoundary.tsx
// src/components/ErrorBoundary.tsx
'use client';
import { Component, ErrorInfo, ReactNode } from 'react';

interface Props {
  children: ReactNode;
  fallback: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

export default class ErrorBoundary extends Component<Props, State> {
  state: State = { hasError: false };

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Error Boundary caught:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return this.props.fallback;
    }
    return this.props.children;
  }
}"



"Header.tsx
C:\neontj\src\components\Header.tsx
'use client';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { usePathname } from 'next/navigation';

export default function Header() {
  const pathname = usePathname();
  const navItems = [
    { label: 'HOME', path: '/' },
    { label: 'SHOP ALL', path: '/shop' },
    { label: 'CUSTOM NEON SIGN', path: '/custom-sign' },
    { label: 'SUBMIT LOGO', path: '/submit-logo' },
    { label: 'PORTFOLIO', path: '/portfolio' },
  ];

  return (
    <header className=""bg-bgBlack border-b border-neonPurple/20 py-4"">
      <div className=""container mx-auto px-4 flex flex-col md:flex-row justify-between items-center"">
        <motion.h1
          className=""text-3xl font-heading neon-text mb-4 md:mb-0""
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <Link href=""/"">NEONTJ</Link>
        </motion.h1>

        <nav className=""flex flex-wrap justify-center gap-4 md:gap-6"">
          {navItems.map((item) => (
            <Link
              key={item.label}
              href={item.path}
              className={`hover:text-neonPurple transition-colors px-2 py-1 rounded ${
                pathname === item.path ||
                (item.path === '/custom-sign' && pathname.startsWith('/custom-sign'))
                  ? 'bg-neonPurple text-bgBlack'
                  : 'hover:bg-bgBlack/50'
              }`}
            >
              {item.label}
            </Link>
          ))}
        </nav>
      </div>
    </header>
  );
}"



"BackboardOptions.tsx
C:\neontj\src\components\customizer\BackboardOptions.tsx
interface BackboardOptionsProps {
  selectedStyle: string;
  selectedColor: string;
  onStyleSelect: (style: string) => void;
  onColorSelect: (color: string) => void;
}

export default function BackboardOptions({
  selectedStyle,
  selectedColor,
  onStyleSelect,
  onColorSelect
}: BackboardOptionsProps) {
  const styles = [
    { id: 'cut-to-letter', label: 'Cut to Letter', popular: true },
    { id: 'rectangle', label: 'Rectangle', popular: false },
    { id: 'cut-to-shape', label: 'Cut to Shape', popular: false },
    { id: 'fine-cut', label: 'Fine Cut', popular: true },
    { id: 'none', label: 'No Backboard', popular: false },
  ];

  const colors = [
    { id: 'clear', label: 'Clear', popular: true },
    { id: 'black', label: 'Black', popular: false },
    { id: 'white', label: 'White', popular: false },
    { id: 'mirror', label: 'Mirror', popular: false },
  ];

  return (
    <div className=""bg-bgBlack/50 border border-neonPurple/30 rounded-xl p-6""> 
      <h3 className=""text-xl font-heading text-iceBlue mb-4"">BACKBOARD OPTIONS</h3>

      <div className=""mb-6""> 
        <h4 className=""font-bold mb-3"">CHOOSE BACKBOARD STYLE</h4>
        <div className=""grid grid-cols-2 gap-3""> 
          {styles.map((style) => ( 
            <button 
              key={style.id} 
              className={`p-3 rounded-lg border-2 text-center text-sm relative ${ 
                selectedStyle === style.id 
                ? 'border-neonPurple bg-neonPurple/10 shadow-neon' 
                : 'border-gray-700 hover:border-iceBlue' 
              }`} 
              onClick={() => onStyleSelect(style.id)} 
            > 
              {style.label} 
              {style.popular && ( 
                <span className=""absolute -top-2 -right-2 bg-neonPurple text-bgBlack text-xs px-2 py-1 rounded-full""> 
                  POPULAR 
                </span> 
              )} 
            </button> 
          ))} 
        </div> 
      </div>

      {selectedStyle !== 'none' && ( 
        <div> 
          <h4 className=""font-bold mb-3"">CHOOSE BACKBOARD COLOR</h4> 
          <div className=""grid grid-cols-2 gap-3""> 
            {colors.map((color) => ( 
              <button 
                key={color.id} 
                className={`p-3 rounded-lg border-2 text-center text-sm relative ${ 
                  selectedColor === color.id 
                  ? 'border-neonPurple bg-neonPurple/10 shadow-neon'
                  : 'border-gray-700 hover:border-iceBlue'
                }`} 
                onClick={() => onColorSelect(color.id)} 
              > 
                {color.label}
                {color.popular && (
                  <span className=""absolute -top-2 -right-2 bg-neonPurple text-bgBlack text-xs px-2 py-1 rounded-full"">
                    POPULAR
                  </span>
                )}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}"



"ColorPicker.tsx
C:\neontj\src\components\customizer\ColorPicker.tsx
interface ColorPickerProps {
  selectedColor: string;
  onSelect: (color: string) => void;
}

export default function ColorPicker({ 
  selectedColor, 
  onSelect 
}: ColorPickerProps) {
  const colors = [
    { name: 'Purple', value: '#B800FF' },
    { name: 'Ice Blue', value: '#00FFFF' },
    { name: 'Red', value: '#FF0000' },
    { name: 'Pink', value: '#FF00FF' },
    { name: 'Green', value: '#00FF00' },
    { name: 'Yellow', value: '#FFFF00' },
    { name: 'Orange', value: '#FF8000' },
    { name: 'White', value: '#FFFFFF' },
  ];

  return (
    <div className=""bg-bgBlack/50 border border-neonPurple/30 rounded-xl p-6"">
      <h3 className=""text-xl font-heading text-iceBlue mb-4"">SELECT COLOR</h3>
      <p className=""text-sm mb-4"">Choose your neon color</p>
      
      <div className=""grid grid-cols-4 gap-2"">
        {colors.map((color) => (
          <button
            key={color.value}
            className={`w-full h-12 rounded-lg border-2 flex items-center justify-center ${
              selectedColor === color.value
                ? 'border-neonPurple shadow-neon'
                : 'border-gray-700'
            }`}
            style={{ backgroundColor: color.value }}
            onClick={() => onSelect(color.value)}
            title={color.name}
          />
        ))}
      </div>
    </div>
  );
}"



"FontSelector.tsx
C:\neontj\src\components\customizer\FontSelector.tsx
import { motion } from 'framer-motion';

interface FontSelectorProps {
  fonts: {
    id: string;
    name: string;
    category: string;
  }[];
  selectedFont: string;
  onSelect: (font: string) => void;
}

export default function FontSelector({ 
  fonts, 
  selectedFont, 
  onSelect 
}: FontSelectorProps) {
  return (
    <div className=""bg-bgBlack/50 border border-neonPurple/30 rounded-xl p-6"">
      <h3 className=""text-xl font-heading text-iceBlue mb-4"">CHOOSE A FONT</h3>
      
      <div className=""grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3 max-h-[300px] overflow-y-auto pr-2"">
        {fonts.map((font) => (
          <motion.button
            key={font.id}
            className={`p-3 rounded-lg border-2 text-center ${
              selectedFont === font.id
                ? 'border-neonPurple bg-neonPurple/10 shadow-neon'
                : 'border-gray-700 hover:border-iceBlue'
            }`}
            onClick={() => onSelect(font.id)}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <div 
              className=""font-heading mb-1 text-lg"" 
              style={{ fontFamily: font.id }}
            >
              Aa
            </div>
            <div className=""text-xs"">{font.name}</div>
          </motion.button>
        ))}
      </div>
    </div>
  );
}"



"PreviewCanvas.tsx
C:\neontj\src\components\customizer\PreviewCanvas.tsx
import { motion } from 'framer-motion';

interface PreviewCanvasProps {
  config: {
    line1: string;
    line2: string;
    lineCount: number;
    font: string;
    color: string;
    size: string;
    backboardStyle: string;
    backboardColor: string;
  };
}

export default function PreviewCanvas({ config }: PreviewCanvasProps) {
  return (
    <div className=""flex flex-col items-center justify-center min-h-[400px]"">
      <div 
        className=""relative w-full max-w-lg aspect-square bg-black border-2 border-dashed border-neonPurple/30 rounded-lg flex items-center justify-center""
        style={{
          background: config.backboardColor === 'clear'
            ? 'transparent'
            : config.backboardColor === 'black'
            ? '#000'
            : config.backboardColor === 'white'
            ? '#F8F8F8'
            : 'linear-gradient(45deg, #00000D, #333)'
        }}
      >
        <div className=""text-center p-8"">
          {/* Line 1 */}
          <motion.div
            className=""my-2""
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
          >
            <div
              className=""font-heading inline-block""
              style={{
                fontFamily: config.font,
                color: config.color,
                textShadow: `0 0 10px ${config.color}, 0 0 20px ${config.color}80`,
                fontSize: '4rem'
              }}
            >
              {config.line1 || 'LINE 1'}
            </div>
          </motion.div>
          
          {/* Line 2 (only shown if 2 lines selected) */}
          {config.lineCount === 2 && (
            <motion.div
              className=""my-2""
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
            >
              <div
                className=""font-heading inline-block""
                style={{
                  fontFamily: config.font,
                  color: config.color,
                  textShadow: `0 0 10px ${config.color}, 0 0 20px ${config.color}80`,
                  fontSize: '4rem'
                }}
              >
                {config.line2 || 'LINE 2'}
              </div>
            </motion.div>
          )}
        </div>

        {/* Size banner in bottom right */}
        <div className=""absolute bottom-4 right-4 text-sm bg-bgBlack/80 px-3 py-1 rounded-full border border-neonPurple"">
          {config.size}
        </div>
      </div>
    </div>
  );
}"



"SizeSelector.tsx
C:\neontj\src\components\customizer\SizeSelector.tsx
import { pricingTable } from '@/utils/pricing';

interface SizeOption {
  size: string;
  dimensions: string;
  price: number;
}

interface SizeSelectorProps {
  lineCount: number;
  selectedSize: string;
  onSelect: (size: string) => void;
}

export default function SizeSelector({ 
  lineCount,
  selectedSize, 
  onSelect 
}: SizeSelectorProps) {
  const sizes = lineCount === 1 ? pricingTable.oneLine : pricingTable.twoLine;

  return (
    <div className=""bg-bgBlack/50 border border-neonPurple/30 rounded-xl p-6"">
      <h3 className=""text-xl font-heading text-iceBlue mb-4"">
        {lineCount === 1 ? 'ONE-LINE' : 'TWO-LINE'} PRICING
      </h3>
      
      <div className=""max-h-[300px] overflow-y-auto pr-2"">
        <table className=""w-full border-collapse"">
          <thead>
            <tr className=""border-b border-neonPurple/30"">
              <th className=""text-left py-2"">Size</th>
              <th className=""text-left py-2"">Dimensions</th>
              <th className=""text-right py-2"">Price</th>
            </tr>
          </thead>
          <tbody>
            {sizes.map((size) => (
              <tr 
                key={size.size}
                className={`cursor-pointer border-b border-neonPurple/10 hover:bg-neonPurple/10 ${
                  selectedSize === size.size ? 'bg-neonPurple/20' : ''
                }`}
                onClick={() => onSelect(size.size)}
              >
                <td className=""py-2"">{size.size}</td>
                <td className=""py-2 text-sm text-iceBlue/80"">{size.dimensions}</td>
                <td className=""py-2 text-right font-mono"">${size.price.toFixed(2)}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}"



"pricing.ts
C:\neontj\src\data\pricing.ts
// src/data/pricing.ts
export const pricingTable = {
  oneLine: [
    { size: '12""×18""', dimensions: 'Max 6"" Tall', basePrice: 99 },
    { size: '18""×24""', dimensions: 'Max 6"" Tall', basePrice: 169 },
    { size: '24""×30""', dimensions: 'Max 7"" Tall', basePrice: 214 },
    { size: '30""×36""', dimensions: 'Max 8"" Tall', basePrice: 250 },
    { size: '36""×42""', dimensions: 'Max 8"" Tall', basePrice: 286 },
    { size: '42""×48""', dimensions: 'Max 9"" Tall', basePrice: 358 },
    { size: '48""×54""', dimensions: 'Max 12"" Tall', basePrice: 421 },
    { size: '54""×60""', dimensions: 'Max 15"" Tall', basePrice: 502 },
    { size: '60""×72""', dimensions: 'Max 18"" Tall', basePrice: 612 },
    { size: '72""×84""', dimensions: 'Max 21"" Tall', basePrice: 740 },
    { size: '84""×94""', dimensions: 'Max 24"" Tall', basePrice: 870 }
  ],
  twoLine: [
    { size: '12""×18""', dimensions: 'Max 8"" Tall', basePrice: 178 },
    { size: '18""×24""', dimensions: 'Max 10"" Tall', basePrice: 296 },
    { size: '24""×30""', dimensions: 'Max 12"" Tall', basePrice: 364 },
    { size: '30""×36""', dimensions: 'Max 14"" Tall', basePrice: 413 },
    { size: '36""×42""', dimensions: 'Max 18"" Tall', basePrice: 458 },
    { size: '42""×48""', dimensions: 'Max 22"" Tall', basePrice: 555 },
    { size: '48""×54""', dimensions: 'Max 26"" Tall', basePrice: 632 },
    { size: '54""×60""', dimensions: 'Max 30"" Tall', basePrice: 753 },
    { size: '60""×72""', dimensions: 'Max 36"" Tall', basePrice: 918 },
    { size: '72""×84""', dimensions: 'Max 42"" Tall', basePrice: 1110 },
    { size: '84""×94""', dimensions: 'Max 46"" Tall', basePrice: 1305 }
  ]
};"



"signs.ts
C:\neontj\src\data\signs.ts
export const galleryImages = [
  { id: 1, src: ""/images/gallery/gallery1.jpg"", alt: ""Custom Neon Bar Sign"" },
  { id: 2, src: ""/images/gallery/gallery2.jpg"", alt: ""Personalized Name Neon"" },
  { id: 3, src: ""/images/gallery/gallery3.jpg"", alt: ""LED Business Sign"" },
  { id: 4, src: ""/images/gallery/gallery4.jpg"", alt: ""Home Decor Neon"" },
  { id: 5, src: ""/images/gallery/gallery5.jpg"", alt: ""Wedding Neon Art"" },
  { id: 6, src: ""/images/gallery/gallery6.jpg"", alt: ""Music Themed Sign"" },
  { id: 7, src: ""/images/gallery/gallery7.jpg"", alt: ""Sports Team Neon"" },
  { id: 8, src: ""/images/gallery/gallery8.jpg"", alt: ""Quotation Sign"" },
  { id: 9, src: ""/images/gallery/gallery9.jpg"", alt: ""Logo Design"" },
  { id: 10, src: ""/images/gallery/gallery10.jpg"", alt: ""Custom Shape"" },
  { id: 11, src: ""/images/gallery/gallery11.jpg"", alt: ""Special Event Sign"" },
  { id: 12, src: ""/images/gallery/gallery12.jpg"", alt: ""Large Wall Piece"" },
  // Add more images as needed
];"



"email.ts
C:\neontj\src\utils\email.ts
import nodemailer from 'nodemailer';

// SMTP Configuration
const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: parseInt(process.env.SMTP_PORT || '587'),
  secure: false, // TLS
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
});

export const sendQuoteEmail = async (quoteData: any) => {
  try {
    const mailOptions = {
      from: `""NEONTJ Quotes"" <info@itsmeteejey.com>`,
      to: 'info@itsmeteejey.com',
      subject: `New Neon Sign Quote - ${new Date().toLocaleDateString()}`,
      html: `
        <h1>New Custom Neon Sign Quote Request</h1>
        <h2>Design Details</h2>
        <p><strong>Line 1:</strong> ${quoteData.line1}</p>
        <p><strong>Line 2:</strong> ${quoteData.line2 || 'N/A'}</p>
        <p><strong>Line Count:</strong> ${quoteData.lineCount}</p>
        <p><strong>Font:</strong> ${quoteData.font}</p>
        <p><strong>Size:</strong> ${quoteData.size}</p>
        <p><strong>Color:</strong> ${quoteData.color}</p>
        <p><strong>Backboard Style:</strong> ${quoteData.backboardStyle}</p>
        <p><strong>Backboard Color:</strong> ${quoteData.backboardColor}</p>
        <p><strong>Estimated Price:</strong> $${quoteData.price.toFixed(2)}</p>
        <p><strong>Customer Email:</strong> ${quoteData.email}</p>
        <p><strong>Timestamp:</strong> ${new Date().toLocaleString()}</p>
      `
    };

    await transporter.sendMail(mailOptions);
    return true;
  } catch (error) {
    console.error('Email sending error:', error);
    return false;
  }
};"



"helpers.ts
C:\neontj\src\utils\helpers.ts
// Validation helpers
export const validateEmail = (email: string): boolean => {
  const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return re.test(email);
};

// Formatting helpers
export const formatDate = (date: Date): string => {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

// Price formatting
export const formatPrice = (price: number): string => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 2
  }).format(price);
};"



"pricing.ts
C:\neontj\src\utils\pricing.ts
// src/utils/pricing.ts
import { pricingTable } from '@/data/pricing';

// Internal markup calculation
const calculateMarkup = (basePrice: number) => {
  if (basePrice <= 49) return 10;
  if (basePrice <= 500) return basePrice * 0.35;
  if (basePrice <= 750) return basePrice * 0.25;
  if (basePrice <= 1000) return basePrice * 0.20;
  if (basePrice <= 1500) return basePrice * 0.15;
  return basePrice * 0.10;
};

// Get final price with hidden markup
export const getPriceDetails = (basePrice: number) => {
  const markup = calculateMarkup(basePrice);
  const finalPrice = basePrice + markup;

  return {
    basePrice,
    markup,
    finalPrice
  };
};"



